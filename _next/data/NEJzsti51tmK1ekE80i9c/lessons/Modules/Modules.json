{"pageProps":{"post":{"attributes":{"title":"Creating and Using JavaScript Modules"},"html":"<h3 id=\"lesson-1-creating-and-using-javascript-modules\">Lesson 1: Creating and Using JavaScript Modules</h3>\n<h4 id=\"what-is-a-module\">What is a Module?</h4>\n<p>A JavaScript module is a self-contained unit of code that encapsulates a specific functionality or feature. It can include variables, functions, classes, or even objects, all organized in a way that makes it easy to import and use in other parts of your codebase.</p>\n<h4 id=\"creating-a-module\">Creating a Module</h4>\n<p>To create a JavaScript module, you typically create a separate <code>.js</code> file for each module. Here&#39;s a simple example of a module that defines some utility functions:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// utils.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">subtract</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a - b;\n}\n</code></pre>\n<p>In this example, we have defined two functions (<code>add</code> and <code>subtract</code>) in the <code>utils.js</code> module, and we&#39;ve used the <code>export</code> keyword to make these functions available for use in other modules.</p>\n<h4 id=\"importing-a-module\">Importing a Module</h4>\n<p>To use the functions from the <code>utils.js</code> module in another JavaScript file, you can use the <code>import</code> statement. Here&#39;s how you can import and use the functions:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">import</span> { add, subtract } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./utils.js&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> result1 = <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">const</span> result2 = <span class=\"hljs-title function_\">subtract</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result1); <span class=\"hljs-comment\">// Output: 8</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result2); <span class=\"hljs-comment\">// Output: 6</span>\n</code></pre>\n<p>In this example, we import the <code>add</code> and <code>subtract</code> functions from the <code>utils.js</code> module and use them in the <code>main.js</code> file.</p>\n<h4 id=\"default-exports\">Default Exports</h4>\n<p>In addition to named exports (like <code>add</code> and <code>subtract</code> in the example above), you can also use default exports to export a single value from a module. Here&#39;s an example:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// math.js</span>\n<span class=\"hljs-keyword\">const</span> pi = <span class=\"hljs-number\">3.14159265359</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> pi;\n</code></pre>\n<p>To import the default export, you can use the following syntax:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">import</span> pi <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./math.js&#x27;</span>;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pi); <span class=\"hljs-comment\">// Output: 3.14159265359</span>\n</code></pre>\n<h4 id=\"commonjs-modules\">CommonJS Modules</h4>\n<p>In addition to the ES6 module system shown above, JavaScript also supports the CommonJS module system, which is used in Node.js and in some older front-end projects. CommonJS uses <code>require</code> and <code>module.exports</code> to define and import modules. Here&#39;s a simple example:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// utils.js using CommonJS</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">subtract</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a - b;\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  add,\n  subtract,\n};\n</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// main.js using CommonJS</span>\n<span class=\"hljs-keyword\">const</span> { add, subtract } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./utils.js&#x27;</span>);\n\n<span class=\"hljs-keyword\">const</span> result1 = <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">const</span> result2 = <span class=\"hljs-title function_\">subtract</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result1); <span class=\"hljs-comment\">// Output: 8</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result2); <span class=\"hljs-comment\">// Output: 6</span>\n</code></pre>\n<h4 id=\"browser-support\">Browser Support</h4>\n<p>Keep in mind that ES6 modules (the <code>import</code> and <code>export</code> syntax) are well-supported in modern browsers. However, if you need to support older browsers or are working in a Node.js environment, you may still encounter CommonJS modules.</p>\n<p>In this lesson, you&#39;ve learned the basics of creating and using JavaScript modules. Modules help you organize your code and make it more maintainable. In the next lessons, we&#39;ll dive deeper into module features and best practices.</p>\n","markdown":"\n### Lesson 1: Creating and Using JavaScript Modules\n\n#### What is a Module?\n\nA JavaScript module is a self-contained unit of code that encapsulates a specific functionality or feature. It can include variables, functions, classes, or even objects, all organized in a way that makes it easy to import and use in other parts of your codebase.\n\n#### Creating a Module\n\nTo create a JavaScript module, you typically create a separate `.js` file for each module. Here's a simple example of a module that defines some utility functions:\n\n```javascript\n// utils.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function subtract(a, b) {\n  return a - b;\n}\n```\n\nIn this example, we have defined two functions (`add` and `subtract`) in the `utils.js` module, and we've used the `export` keyword to make these functions available for use in other modules.\n\n#### Importing a Module\n\nTo use the functions from the `utils.js` module in another JavaScript file, you can use the `import` statement. Here's how you can import and use the functions:\n\n```javascript\n// main.js\nimport { add, subtract } from './utils.js';\n\nconst result1 = add(5, 3);\nconst result2 = subtract(10, 4);\n\nconsole.log(result1); // Output: 8\nconsole.log(result2); // Output: 6\n```\n\nIn this example, we import the `add` and `subtract` functions from the `utils.js` module and use them in the `main.js` file.\n\n#### Default Exports\n\nIn addition to named exports (like `add` and `subtract` in the example above), you can also use default exports to export a single value from a module. Here's an example:\n\n```javascript\n// math.js\nconst pi = 3.14159265359;\n\nexport default pi;\n```\n\nTo import the default export, you can use the following syntax:\n\n```javascript\n// main.js\nimport pi from './math.js';\n\nconsole.log(pi); // Output: 3.14159265359\n```\n\n#### CommonJS Modules\n\nIn addition to the ES6 module system shown above, JavaScript also supports the CommonJS module system, which is used in Node.js and in some older front-end projects. CommonJS uses `require` and `module.exports` to define and import modules. Here's a simple example:\n\n```javascript\n// utils.js using CommonJS\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction subtract(a, b) {\n  return a - b;\n}\n\nmodule.exports = {\n  add,\n  subtract,\n};\n```\n\n```javascript\n// main.js using CommonJS\nconst { add, subtract } = require('./utils.js');\n\nconst result1 = add(5, 3);\nconst result2 = subtract(10, 4);\n\nconsole.log(result1); // Output: 8\nconsole.log(result2); // Output: 6\n```\n\n#### Browser Support\n\nKeep in mind that ES6 modules (the `import` and `export` syntax) are well-supported in modern browsers. However, if you need to support older browsers or are working in a Node.js environment, you may still encounter CommonJS modules.\n\nIn this lesson, you've learned the basics of creating and using JavaScript modules. Modules help you organize your code and make it more maintainable. In the next lessons, we'll dive deeper into module features and best practices.","slug":"Modules","title":"Creating and Using JavaScript Modules","section":"Modules","icon":"info-circle","filePath":"/home/runner/work/amanj-course/amanj-course/lessons/08-Modules/01-Modules.md","nextSlug":"/amanj-course/lessons/Modules/Modules2","prevSlug":"/amanj-course/lessons/Promises-and-Data-Fetching/Answers"}},"__N_SSG":true}