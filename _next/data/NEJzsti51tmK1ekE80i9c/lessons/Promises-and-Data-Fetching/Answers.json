{"pageProps":{"post":{"attributes":{"title":"Answers to Promises and Data Fretching Exercises"},"html":"<p><strong>Exercise 1: Fetch Data from an API</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>, error));\n</code></pre>\n<p><strong>Exercise 2: Handle Errors</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://jsonplaceholder.typicode.com/todos/99999&#x27;</span>)\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (!response.<span class=\"hljs-property\">ok</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Network response was not ok&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-title function_\">json</span>();\n  })\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>, error));\n</code></pre>\n<p><strong>Exercise 3: Chaining Promises</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>)\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">postData</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://jsonplaceholder.typicode.com/users/1&#x27;</span>)\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())\n      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">userData</span> =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Post Data:&#x27;</span>, postData);\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;User Data:&#x27;</span>, userData);\n      });\n  })\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>, error));\n</code></pre>\n<p><strong>Exercise 4: Promise.all</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> fetchPost = <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>());\n<span class=\"hljs-keyword\">const</span> fetchUser = <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://jsonplaceholder.typicode.com/users/1&#x27;</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>());\n\n<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([fetchPost, fetchUser])\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">[postData, userData]</span>) =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Post Data:&#x27;</span>, postData);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;User Data:&#x27;</span>, userData);\n  })\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>, error));\n</code></pre>\n<p><strong>Exercise 5: Async/Await</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchData</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>);\n    <span class=\"hljs-keyword\">if</span> (!response.<span class=\"hljs-property\">ok</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Network response was not ok&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>, error);\n  }\n}\n\n<span class=\"hljs-title function_\">fetchData</span>();\n</code></pre>\n<p><strong>Exercise 6: Error Handling with Async/Await</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchData</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://jsonplaceholder.typicode.com/todos/99999&#x27;</span>);\n    <span class=\"hljs-keyword\">if</span> (!response.<span class=\"hljs-property\">ok</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Network response was not ok&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>, error);\n  }\n}\n\n<span class=\"hljs-title function_\">fetchData</span>();\n</code></pre>\n<p><strong>Exercise 7: Fetch and Render</strong></p>\n<p>HTML:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;fetchButton&quot;</span>&gt;</span>Fetch Data<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;output&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>JavaScript:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> fetchButton = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;fetchButton&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> outputDiv = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;output&#x27;</span>);\n\nfetchButton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)\n    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())\n    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n      outputDiv.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(data, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>);\n    })\n    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>, error);\n      outputDiv.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&#x27;An error occurred.&#x27;</span>;\n    });\n});\n</code></pre>\n<p><strong>Exercise 8: Loading Indicator</strong></p>\n<p>HTML:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;fetchButton&quot;</span>&gt;</span>Fetch Data<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;loadingIndicator&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;display: none;&quot;</span>&gt;</span>Loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;output&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>JavaScript:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> fetchButton = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;fetchButton&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> loadingIndicator = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;loadingIndicator&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> outputDiv = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;output&#x27;</span>);\n\nfetchButton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  loadingIndicator.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&#x27;block&#x27;</span>;\n\n  <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)\n    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())\n    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n      outputDiv.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(data, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>);\n    })\n    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>, error);\n      outputDiv.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&#x27;An error occurred.&#x27;</span>;\n    })\n    .<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      loadingIndicator.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&#x27;none&#x27;</span>;\n    });\n});\n</code></pre>\n<p><strong>Exercise 9: Pagination</strong></p>\n<p>HTML:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;prevButton&quot;</span>&gt;</span>Previous<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;nextButton&quot;</span>&gt;</span>Next<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;output&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>JavaScript:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> currentPage = <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchData</span>(<span class=\"hljs-params\">page</span>) {\n  <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`https://jsonplaceholder.typicode.com/posts?_page=<span class=\"hljs-subst\">${page}</span>`</span>)\n    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())\n    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;output&#x27;</span>).<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(data, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>);\n    })\n    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>, error);\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;output&#x27;</span>).<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&#x27;An error occurred.&#x27;</span>;\n    });\n}\n\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;prevButton&#x27;</span>).<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (currentPage &gt; <span class=\"hljs-number\">1</span>) {\n    currentPage--;\n    <span class=\"hljs-title function_\">fetchData</span>(currentPage);\n  }\n});\n\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;nextButton&#x27;</span>).<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  currentPage++;\n  <span class=\"hljs-title function_\">fetchData</span>(currentPage);\n});\n</code></pre>\n<p><strong>Exercise 10: Data Post Processing</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>)\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">posts</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// Filter posts with userId 1</span>\n    <span class=\"hljs-keyword\">const</span> filteredPosts = posts.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> post.<span class=\"hljs-property\">userId</span> === <span class=\"hljs-number\">1</span>);\n    \n    <span class=\"hljs-comment\">// Sort posts by title</span>\n    filteredPosts.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a.<span class=\"hljs-property\">title</span>.<span class=\"hljs-title function_\">localeCompare</span>(b.<span class=\"hljs-property\">title</span>));\n\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Filtered and Sorted Posts:&#x27;</span>, filteredPosts);\n  })\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>, error));\n</code></pre>\n","markdown":"\n\n**Exercise 1: Fetch Data from an API**\n\n```javascript\nfetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n**Exercise 2: Handle Errors**\n\n```javascript\nfetch('https://jsonplaceholder.typicode.com/todos/99999')\n  .then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n**Exercise 3: Chaining Promises**\n\n```javascript\nfetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.json())\n  .then(postData => {\n    return fetch('https://jsonplaceholder.typicode.com/users/1')\n      .then(response => response.json())\n      .then(userData => {\n        console.log('Post Data:', postData);\n        console.log('User Data:', userData);\n      });\n  })\n  .catch(error => console.error('Error:', error));\n```\n\n**Exercise 4: Promise.all**\n\n```javascript\nconst fetchPost = fetch('https://jsonplaceholder.typicode.com/posts/1').then(response => response.json());\nconst fetchUser = fetch('https://jsonplaceholder.typicode.com/users/1').then(response => response.json());\n\nPromise.all([fetchPost, fetchUser])\n  .then(([postData, userData]) => {\n    console.log('Post Data:', postData);\n    console.log('User Data:', userData);\n  })\n  .catch(error => console.error('Error:', error));\n```\n\n**Exercise 5: Async/Await**\n\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nfetchData();\n```\n\n**Exercise 6: Error Handling with Async/Await**\n\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos/99999');\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nfetchData();\n```\n\n**Exercise 7: Fetch and Render**\n\nHTML:\n```html\n<button id=\"fetchButton\">Fetch Data</button>\n<div id=\"output\"></div>\n```\n\nJavaScript:\n```javascript\nconst fetchButton = document.getElementById('fetchButton');\nconst outputDiv = document.getElementById('output');\n\nfetchButton.addEventListener('click', () => {\n  fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(data => {\n      outputDiv.textContent = JSON.stringify(data, null, 2);\n    })\n    .catch(error => {\n      console.error('Error:', error);\n      outputDiv.textContent = 'An error occurred.';\n    });\n});\n```\n\n**Exercise 8: Loading Indicator**\n\nHTML:\n```html\n<button id=\"fetchButton\">Fetch Data</button>\n<div id=\"loadingIndicator\" style=\"display: none;\">Loading...</div>\n<div id=\"output\"></div>\n```\n\nJavaScript:\n```javascript\nconst fetchButton = document.getElementById('fetchButton');\nconst loadingIndicator = document.getElementById('loadingIndicator');\nconst outputDiv = document.getElementById('output');\n\nfetchButton.addEventListener('click', () => {\n  loadingIndicator.style.display = 'block';\n\n  fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(data => {\n      outputDiv.textContent = JSON.stringify(data, null, 2);\n    })\n    .catch(error => {\n      console.error('Error:', error);\n      outputDiv.textContent = 'An error occurred.';\n    })\n    .finally(() => {\n      loadingIndicator.style.display = 'none';\n    });\n});\n```\n\n**Exercise 9: Pagination**\n\nHTML:\n```html\n<button id=\"prevButton\">Previous</button>\n<button id=\"nextButton\">Next</button>\n<div id=\"output\"></div>\n```\n\nJavaScript:\n```javascript\nlet currentPage = 1;\n\nfunction fetchData(page) {\n  fetch(`https://jsonplaceholder.typicode.com/posts?_page=${page}`)\n    .then(response => response.json())\n    .then(data => {\n      document.getElementById('output').textContent = JSON.stringify(data, null, 2);\n    })\n    .catch(error => {\n      console.error('Error:', error);\n      document.getElementById('output').textContent = 'An error occurred.';\n    });\n}\n\ndocument.getElementById('prevButton').addEventListener('click', () => {\n  if (currentPage > 1) {\n    currentPage--;\n    fetchData(currentPage);\n  }\n});\n\ndocument.getElementById('nextButton').addEventListener('click', () => {\n  currentPage++;\n  fetchData(currentPage);\n});\n```\n\n**Exercise 10: Data Post Processing**\n\n```javascript\nfetch('https://jsonplaceholder.typicode.com/posts')\n  .then(response => response.json())\n  .then(posts => {\n    // Filter posts with userId 1\n    const filteredPosts = posts.filter(post => post.userId === 1);\n    \n    // Sort posts by title\n    filteredPosts.sort((a, b) => a.title.localeCompare(b.title));\n\n    console.log('Filtered and Sorted Posts:', filteredPosts);\n  })\n  .catch(error => console.error('Error:', error));\n```\n\n","slug":"Answers","title":"Answers to Promises and Data Fretching Exercises","section":"Promises and Data Fetching","icon":"info-circle","filePath":"/home/runner/work/amanj-course/amanj-course/lessons/07-Promises-and-Data-Fetching/05-Answers.md","nextSlug":"/amanj-course/lessons/Modules/Modules","prevSlug":"/amanj-course/lessons/Promises-and-Data-Fetching/Exercises"}},"__N_SSG":true}