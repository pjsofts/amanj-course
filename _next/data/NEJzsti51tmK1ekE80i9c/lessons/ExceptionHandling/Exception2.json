{"pageProps":{"post":{"attributes":{"title":"Advanced JavaScript Exception Handling"},"html":"<h3 id=\"lesson-2-advanced-javascript-exception-handling\">Lesson 2: Advanced JavaScript Exception Handling</h3>\n<h4 id=\"1-throwing-custom-errors\">1. Throwing Custom Errors</h4>\n<p>In addition to built-in error types like <code>SyntaxError</code> or <code>TypeError</code>, you can create custom error objects to represent specific errors in your code. This allows you to provide more context and information when an exception occurs.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyCustomError</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Error</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">message</span>) {\n    <span class=\"hljs-variable language_\">super</span>(message);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;MyCustomError&#x27;</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-comment\">// Code that may throw a custom error</span>\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyCustomError</span>(<span class=\"hljs-string\">&#x27;Something went wrong!&#x27;</span>);\n} <span class=\"hljs-keyword\">catch</span> (error) {\n  <span class=\"hljs-keyword\">if</span> (error <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">MyCustomError</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Custom error caught:&#x27;</span>, error.<span class=\"hljs-property\">message</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;An unexpected error occurred:&#x27;</span>, error.<span class=\"hljs-property\">message</span>);\n  }\n}\n</code></pre>\n<p>By extending the <code>Error</code> class, you can create custom error types with their own names and messages, making it easier to identify and handle them.</p>\n<h4 id=\"2-multiple-catch-blocks\">2. Multiple <code>catch</code> Blocks</h4>\n<p>You can have multiple <code>catch</code> blocks to handle different types of exceptions. JavaScript will execute the first <code>catch</code> block that matches the exception type.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-comment\">// Code that may throw an error</span>\n} <span class=\"hljs-keyword\">catch</span> (syntaxError) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Syntax error:&#x27;</span>, syntaxError.<span class=\"hljs-property\">message</span>);\n} <span class=\"hljs-keyword\">catch</span> (referenceError) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Reference error:&#x27;</span>, referenceError.<span class=\"hljs-property\">message</span>);\n} <span class=\"hljs-keyword\">catch</span> (error) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;An unexpected error occurred:&#x27;</span>, error.<span class=\"hljs-property\">message</span>);\n}\n</code></pre>\n<p>Having multiple <code>catch</code> blocks allows you to handle specific types of errors differently.</p>\n<h4 id=\"3-rethrowing-exceptions\">3. Rethrowing Exceptions</h4>\n<p>Sometimes, you may want to catch an exception, perform some logging or cleanup, and then rethrow the same exception to propagate it up the call stack for further handling.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-comment\">// Code that may throw an error</span>\n} <span class=\"hljs-keyword\">catch</span> (error) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;An error occurred:&#x27;</span>, error.<span class=\"hljs-property\">message</span>);\n  <span class=\"hljs-comment\">// Perform cleanup or additional handling</span>\n  <span class=\"hljs-keyword\">throw</span> error; <span class=\"hljs-comment\">// Rethrow the same error</span>\n}\n</code></pre>\n<p>Rethrowing an exception can be useful for logging or taking specific actions while ensuring that the original exception isn&#39;t lost.</p>\n<h4 id=\"4-error-propagation\">4. Error Propagation</h4>\n<p>When you encounter an exception you can&#39;t handle at a particular level, it&#39;s often better to let it propagate up the call stack to a higher-level error handler.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">innerFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Inner function error&#x27;</span>);\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">outerFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-title function_\">innerFunction</span>();\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Caught an error:&#x27;</span>, error.<span class=\"hljs-property\">message</span>);\n    <span class=\"hljs-comment\">// Don&#x27;t rethrow; let it propagate to a higher-level handler</span>\n  }\n}\n\n<span class=\"hljs-title function_\">outerFunction</span>();\n</code></pre>\n<p>In this example, the <code>innerFunction</code> throws an error, which is caught by the <code>outerFunction</code>. The <code>outerFunction</code> logs the error but doesn&#39;t rethrow it, allowing it to continue propagating.</p>\n<h4 id=\"5-asyncawait-error-handling\">5. Async/Await Error Handling</h4>\n<p>When working with asynchronous code using <code>async/await</code>, you can handle errors using try-catch blocks just like with synchronous code.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchData</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://api.example.com/data&#x27;</span>);\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n    <span class=\"hljs-keyword\">return</span> data;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error fetching data:&#x27;</span>, error.<span class=\"hljs-property\">message</span>);\n    <span class=\"hljs-keyword\">throw</span> error; <span class=\"hljs-comment\">// Rethrow if necessary</span>\n  }\n}\n</code></pre>\n<p>Handling errors in asynchronous code ensures that your application remains stable even when network requests or asynchronous operations fail.</p>\n<h4 id=\"6-error-logging-and-reporting\">6. Error Logging and Reporting</h4>\n<p>In real-world applications, it&#39;s essential to log and report errors for debugging and monitoring purposes. You can use logging libraries like <code>console.error</code>, <code>console.log</code>, or dedicated error tracking services to collect and analyze error data in production.</p>\n<h4 id=\"7-graceful-degradation\">7. Graceful Degradation</h4>\n<p>In some cases, you can design your code to gracefully handle errors and continue functioning, providing fallbacks or alternative paths when errors occur. This approach can improve the user experience.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">safeDivision</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">if</span> (b === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Division by zero&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> a / b;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>, error.<span class=\"hljs-property\">message</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Infinity</span>; <span class=\"hljs-comment\">// Provide a fallback value</span>\n  }\n}\n</code></pre>\n<p>By considering how your code handles errors, you can ensure that your application remains stable and provides informative feedback to users.</p>\n<p>In this lesson, you&#39;ve explored advanced JavaScript exception handling techniques and best practices. Effective exception handling is crucial for creating robust and reliable applications, and mastering these techniques will make you a more proficient developer.</p>\n","markdown":"\n### Lesson 2: Advanced JavaScript Exception Handling\n\n#### 1. Throwing Custom Errors\n\nIn addition to built-in error types like `SyntaxError` or `TypeError`, you can create custom error objects to represent specific errors in your code. This allows you to provide more context and information when an exception occurs.\n\n```javascript\nclass MyCustomError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'MyCustomError';\n  }\n}\n\ntry {\n  // Code that may throw a custom error\n  throw new MyCustomError('Something went wrong!');\n} catch (error) {\n  if (error instanceof MyCustomError) {\n    console.error('Custom error caught:', error.message);\n  } else {\n    console.error('An unexpected error occurred:', error.message);\n  }\n}\n```\n\nBy extending the `Error` class, you can create custom error types with their own names and messages, making it easier to identify and handle them.\n\n#### 2. Multiple `catch` Blocks\n\nYou can have multiple `catch` blocks to handle different types of exceptions. JavaScript will execute the first `catch` block that matches the exception type.\n\n```javascript\ntry {\n  // Code that may throw an error\n} catch (syntaxError) {\n  console.error('Syntax error:', syntaxError.message);\n} catch (referenceError) {\n  console.error('Reference error:', referenceError.message);\n} catch (error) {\n  console.error('An unexpected error occurred:', error.message);\n}\n```\n\nHaving multiple `catch` blocks allows you to handle specific types of errors differently.\n\n#### 3. Rethrowing Exceptions\n\nSometimes, you may want to catch an exception, perform some logging or cleanup, and then rethrow the same exception to propagate it up the call stack for further handling.\n\n```javascript\ntry {\n  // Code that may throw an error\n} catch (error) {\n  console.error('An error occurred:', error.message);\n  // Perform cleanup or additional handling\n  throw error; // Rethrow the same error\n}\n```\n\nRethrowing an exception can be useful for logging or taking specific actions while ensuring that the original exception isn't lost.\n\n#### 4. Error Propagation\n\nWhen you encounter an exception you can't handle at a particular level, it's often better to let it propagate up the call stack to a higher-level error handler.\n\n```javascript\nfunction innerFunction() {\n  throw new Error('Inner function error');\n}\n\nfunction outerFunction() {\n  try {\n    innerFunction();\n  } catch (error) {\n    console.error('Caught an error:', error.message);\n    // Don't rethrow; let it propagate to a higher-level handler\n  }\n}\n\nouterFunction();\n```\n\nIn this example, the `innerFunction` throws an error, which is caught by the `outerFunction`. The `outerFunction` logs the error but doesn't rethrow it, allowing it to continue propagating.\n\n#### 5. Async/Await Error Handling\n\nWhen working with asynchronous code using `async/await`, you can handle errors using try-catch blocks just like with synchronous code.\n\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error.message);\n    throw error; // Rethrow if necessary\n  }\n}\n```\n\nHandling errors in asynchronous code ensures that your application remains stable even when network requests or asynchronous operations fail.\n\n#### 6. Error Logging and Reporting\n\nIn real-world applications, it's essential to log and report errors for debugging and monitoring purposes. You can use logging libraries like `console.error`, `console.log`, or dedicated error tracking services to collect and analyze error data in production.\n\n#### 7. Graceful Degradation\n\nIn some cases, you can design your code to gracefully handle errors and continue functioning, providing fallbacks or alternative paths when errors occur. This approach can improve the user experience.\n\n```javascript\nfunction safeDivision(a, b) {\n  try {\n    if (b === 0) {\n      throw new Error('Division by zero');\n    }\n    return a / b;\n  } catch (error) {\n    console.error('Error:', error.message);\n    return Infinity; // Provide a fallback value\n  }\n}\n```\n\nBy considering how your code handles errors, you can ensure that your application remains stable and provides informative feedback to users.\n\nIn this lesson, you've explored advanced JavaScript exception handling techniques and best practices. Effective exception handling is crucial for creating robust and reliable applications, and mastering these techniques will make you a more proficient developer.","slug":"Exception2","title":"Advanced JavaScript Exception Handling","section":"ExceptionHandling","icon":"info-circle","filePath":"/home/runner/work/amanj-course/amanj-course/lessons/10-ExceptionHandling/02-Exception2.md","nextSlug":"/amanj-course/lessons/ExceptionHandling/Exception3","prevSlug":"/amanj-course/lessons/ExceptionHandling/Exception1"}},"__N_SSG":true}