{"pageProps":{"post":{"attributes":{"title":"Function Parameters, Arguments, and Return Values"},"html":"<p><strong>Lesson 3: Function Parameters, Arguments, and Return Values</strong></p>\n<p>In this lesson, we&#39;ll explore more about function parameters, arguments, and return values in JavaScript.</p>\n<p><strong>1. Default Parameters (ES6):</strong>\nYou can provide default values for function parameters. If an argument isn&#39;t passed when the function is called or if it&#39;s <code>undefined</code>, the default value will be used.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">name = <span class=\"hljs-string\">&quot;Guest&quot;</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello, &quot;</span> + name + <span class=\"hljs-string\">&quot;!&quot;</span>);\n}\n\n<span class=\"hljs-title function_\">greet</span>();          <span class=\"hljs-comment\">// Output: Hello, Guest!</span>\n<span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-string\">&quot;Alice&quot;</span>);   <span class=\"hljs-comment\">// Output: Hello, Alice!</span>\n</code></pre>\n<p><strong>2. Rest Parameters (ES6):</strong>\nThe rest parameter allows you to pass a variable number of arguments to a function as an array. It&#39;s denoted by <code>...</code> followed by the parameter name.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">...numbers</span>) {\n    <span class=\"hljs-keyword\">return</span> numbers.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">total, num</span>) =&gt;</span> total + num, <span class=\"hljs-number\">0</span>);\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// Output: 6</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>));    <span class=\"hljs-comment\">// Output: 9</span>\n</code></pre>\n<p><strong>3. Arguments Object:</strong>\nInside a function, you can access all the passed arguments using the <code>arguments</code> object, even if they aren&#39;t explicitly defined as parameters.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">showArgs</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span>; i++) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">arguments</span>[i]);\n    }\n}\n\n<span class=\"hljs-title function_\">showArgs</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;hello&quot;</span>, <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// Output: 1, hello, true</span>\n</code></pre>\n<p><strong>4. Returning Values:</strong>\nFunctions can return values using the <code>return</code> statement. When a function encounters a <code>return</code>, it stops executing and passes the specified value back to the caller.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-params\">a, b</span>) {\n    <span class=\"hljs-keyword\">return</span> a * b;\n}\n\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result); <span class=\"hljs-comment\">// Output: 12</span>\n</code></pre>\n<p><strong>5. Returning Multiple Values:</strong>\nIn JavaScript, you can return multiple values from a function by using an object, an array, or more recently, destructuring (ES6).</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getPerson</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">&quot;John&quot;</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">&quot;Doe&quot;</span> };\n}\n\n<span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-title function_\">getPerson</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">firstName</span>); <span class=\"hljs-comment\">// Output: John</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getCoordinates</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-number\">12.345</span>, <span class=\"hljs-number\">67.890</span>];\n}\n\n<span class=\"hljs-keyword\">const</span> [latitude, longitude] = <span class=\"hljs-title function_\">getCoordinates</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(latitude, longitude); <span class=\"hljs-comment\">// Output: 12.345 67.890</span>\n</code></pre>\n<p><strong>6. Callback Functions:</strong>\nFunctions can be passed as arguments to other functions, which are then called within the receiving function. These are known as callback functions and are often used for asynchronous tasks.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doSomething</span>(<span class=\"hljs-params\">callback</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Doing something...&quot;</span>);\n    <span class=\"hljs-title function_\">callback</span>();\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">afterSomething</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;After something.&quot;</span>);\n}\n\n<span class=\"hljs-title function_\">doSomething</span>(afterSomething);\n</code></pre>\n<p>These are important concepts regarding function parameters, arguments, and return values in JavaScript. Understanding how to pass and manipulate data between functions is essential for creating more complex and efficient programs.</p>\n","markdown":"\n**Lesson 3: Function Parameters, Arguments, and Return Values**\n\nIn this lesson, we'll explore more about function parameters, arguments, and return values in JavaScript.\n\n**1. Default Parameters (ES6):**\nYou can provide default values for function parameters. If an argument isn't passed when the function is called or if it's `undefined`, the default value will be used.\n\n```javascript\nfunction greet(name = \"Guest\") {\n    console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet();          // Output: Hello, Guest!\ngreet(\"Alice\");   // Output: Hello, Alice!\n```\n\n**2. Rest Parameters (ES6):**\nThe rest parameter allows you to pass a variable number of arguments to a function as an array. It's denoted by `...` followed by the parameter name.\n\n```javascript\nfunction sum(...numbers) {\n    return numbers.reduce((total, num) => total + num, 0);\n}\n\nconsole.log(sum(1, 2, 3)); // Output: 6\nconsole.log(sum(4, 5));    // Output: 9\n```\n\n**3. Arguments Object:**\nInside a function, you can access all the passed arguments using the `arguments` object, even if they aren't explicitly defined as parameters.\n\n```javascript\nfunction showArgs() {\n    for (let i = 0; i < arguments.length; i++) {\n        console.log(arguments[i]);\n    }\n}\n\nshowArgs(1, \"hello\", true); // Output: 1, hello, true\n```\n\n**4. Returning Values:**\nFunctions can return values using the `return` statement. When a function encounters a `return`, it stops executing and passes the specified value back to the caller.\n\n```javascript\nfunction multiply(a, b) {\n    return a * b;\n}\n\nconst result = multiply(3, 4);\nconsole.log(result); // Output: 12\n```\n\n**5. Returning Multiple Values:**\nIn JavaScript, you can return multiple values from a function by using an object, an array, or more recently, destructuring (ES6).\n\n```javascript\nfunction getPerson() {\n    return { firstName: \"John\", lastName: \"Doe\" };\n}\n\nconst person = getPerson();\nconsole.log(person.firstName); // Output: John\n\nfunction getCoordinates() {\n    return [12.345, 67.890];\n}\n\nconst [latitude, longitude] = getCoordinates();\nconsole.log(latitude, longitude); // Output: 12.345 67.890\n```\n\n**6. Callback Functions:**\nFunctions can be passed as arguments to other functions, which are then called within the receiving function. These are known as callback functions and are often used for asynchronous tasks.\n\n```javascript\nfunction doSomething(callback) {\n    console.log(\"Doing something...\");\n    callback();\n}\n\nfunction afterSomething() {\n    console.log(\"After something.\");\n}\n\ndoSomething(afterSomething);\n```\n\nThese are important concepts regarding function parameters, arguments, and return values in JavaScript. Understanding how to pass and manipulate data between functions is essential for creating more complex and efficient programs.","slug":"Parameters","title":"Function Parameters, Arguments, and Return Values","section":"Functions","icon":"info-circle","filePath":"/home/runner/work/amanj-course/amanj-course/lessons/06-Functions/03-Parameters.md","nextSlug":"/amanj-course/lessons/Functions/Exercises","prevSlug":"/amanj-course/lessons/Functions/Scope"}},"__N_SSG":true}