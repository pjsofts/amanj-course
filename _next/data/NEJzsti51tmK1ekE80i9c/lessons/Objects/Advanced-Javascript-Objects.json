{"pageProps":{"post":{"attributes":{"title":"Advanced JavaScript Objects"},"html":"<p><strong>Lesson 3: Advanced JavaScript Objects</strong></p>\n<p>Welcome to your third lesson on JavaScript objects! In this lesson, we&#39;ll dive into more advanced concepts related to objects, including working with nested objects, object prototypes, and object constructors.</p>\n<p><strong>Nested Objects:</strong></p>\n<p>Objects can contain other objects as their properties. These are called nested objects and are useful for representing complex data structures.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> person = {\n  <span class=\"hljs-attr\">name</span>: {\n    <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,\n    <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">&quot;Doe&quot;</span>,\n  },\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>,\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">name</span>.<span class=\"hljs-property\">firstName</span>); <span class=\"hljs-comment\">// Output: John</span>\n</code></pre>\n<p><strong>Object Prototypes:</strong></p>\n<p>JavaScript is a prototype-based language, which means objects can inherit properties and methods from other objects called prototypes.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Creating a prototype object</span>\n<span class=\"hljs-keyword\">let</span> animal = {\n  <span class=\"hljs-attr\">speak</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Some sound&quot;</span>);\n  },\n};\n\n<span class=\"hljs-comment\">// Creating an object that inherits from the prototype</span>\n<span class=\"hljs-keyword\">let</span> dog = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(animal);\ndog.<span class=\"hljs-title function_\">speak</span>(); <span class=\"hljs-comment\">// Output: Some sound</span>\n</code></pre>\n<p><strong>Constructor Functions:</strong></p>\n<p>Constructor functions are used to create multiple objects with similar properties and methods. They&#39;re commonly used for object templates.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Car</span>(<span class=\"hljs-params\">make, model, year</span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">make</span> = make;\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">model</span> = model;\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">year</span> = year;\n}\n\n<span class=\"hljs-keyword\">let</span> myCar = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;Toyota&quot;</span>, <span class=\"hljs-string\">&quot;Camry&quot;</span>, <span class=\"hljs-number\">2023</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myCar.<span class=\"hljs-property\">make</span>); <span class=\"hljs-comment\">// Output: Toyota</span>\n</code></pre>\n<p><strong>Adding Methods to Prototypes:</strong></p>\n<p>To avoid duplicating methods across instances, you can add methods to the prototype of a constructor function.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title class_\">Car</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">start</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Engine started&quot;</span>);\n};\n\nmyCar.<span class=\"hljs-title function_\">start</span>(); <span class=\"hljs-comment\">// Output: Engine started</span>\n</code></pre>\n<p><strong>Class Syntax (ES6):</strong></p>\n<p>ES6 introduced the <code>class</code> syntax, which provides a more structured way to define constructor functions and their methods.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Book</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">title, author</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">title</span> = title;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">author</span> = author;\n  }\n\n  <span class=\"hljs-title function_\">getInfo</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.title}</span> by <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.author}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">let</span> myBook = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Book</span>(<span class=\"hljs-string\">&quot;The Great Gatsby&quot;</span>, <span class=\"hljs-string\">&quot;F. Scott Fitzgerald&quot;</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myBook.<span class=\"hljs-title function_\">getInfo</span>()); <span class=\"hljs-comment\">// Output: The Great Gatsby by F. Scott Fitzgerald</span>\n</code></pre>\n<p><strong>Inheritance and Super (ES6):</strong></p>\n<p>With ES6 classes, you can easily implement inheritance and use the <code>super</code> keyword to call methods from the parent class.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SportsCar</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Car</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">make, model, year, topSpeed</span>) {\n    <span class=\"hljs-variable language_\">super</span>(make, model, year);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">topSpeed</span> = topSpeed;\n  }\n}\n\n<span class=\"hljs-keyword\">let</span> mySportsCar = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SportsCar</span>(<span class=\"hljs-string\">&quot;Ferrari&quot;</span>, <span class=\"hljs-string\">&quot;488&quot;</span>, <span class=\"hljs-number\">2023</span>, <span class=\"hljs-number\">210</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(mySportsCar.<span class=\"hljs-title function_\">start</span>()); <span class=\"hljs-comment\">// Output: Engine started</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(mySportsCar.<span class=\"hljs-property\">topSpeed</span>); <span class=\"hljs-comment\">// Output: 210</span>\n</code></pre>\n<p><strong>Summary:</strong></p>\n<p>In this lesson, you&#39;ve explored advanced concepts related to JavaScript objects. You&#39;ve learned about nested objects, object prototypes, constructor functions, the <code>class</code> syntax, and inheritance. These concepts are crucial for building more complex and organized applications. Continue practicing and experimenting with objects to solidify your understanding. In the next lesson, we&#39;ll cover JSON (JavaScript Object Notation) and how to convert objects to JSON and vice versa.</p>\n","markdown":"\n**Lesson 3: Advanced JavaScript Objects**\n\nWelcome to your third lesson on JavaScript objects! In this lesson, we'll dive into more advanced concepts related to objects, including working with nested objects, object prototypes, and object constructors.\n\n**Nested Objects:**\n\nObjects can contain other objects as their properties. These are called nested objects and are useful for representing complex data structures.\n\n```javascript\nlet person = {\n  name: {\n    firstName: \"John\",\n    lastName: \"Doe\",\n  },\n  age: 30,\n};\n\nconsole.log(person.name.firstName); // Output: John\n```\n\n**Object Prototypes:**\n\nJavaScript is a prototype-based language, which means objects can inherit properties and methods from other objects called prototypes.\n\n```javascript\n// Creating a prototype object\nlet animal = {\n  speak: function() {\n    console.log(\"Some sound\");\n  },\n};\n\n// Creating an object that inherits from the prototype\nlet dog = Object.create(animal);\ndog.speak(); // Output: Some sound\n```\n\n**Constructor Functions:**\n\nConstructor functions are used to create multiple objects with similar properties and methods. They're commonly used for object templates.\n\n```javascript\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\n\nlet myCar = new Car(\"Toyota\", \"Camry\", 2023);\nconsole.log(myCar.make); // Output: Toyota\n```\n\n**Adding Methods to Prototypes:**\n\nTo avoid duplicating methods across instances, you can add methods to the prototype of a constructor function.\n\n```javascript\nCar.prototype.start = function() {\n  console.log(\"Engine started\");\n};\n\nmyCar.start(); // Output: Engine started\n```\n\n**Class Syntax (ES6):**\n\nES6 introduced the `class` syntax, which provides a more structured way to define constructor functions and their methods.\n\n```javascript\nclass Book {\n  constructor(title, author) {\n    this.title = title;\n    this.author = author;\n  }\n\n  getInfo() {\n    return `${this.title} by ${this.author}`;\n  }\n}\n\nlet myBook = new Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\");\nconsole.log(myBook.getInfo()); // Output: The Great Gatsby by F. Scott Fitzgerald\n```\n\n**Inheritance and Super (ES6):**\n\nWith ES6 classes, you can easily implement inheritance and use the `super` keyword to call methods from the parent class.\n\n```javascript\nclass SportsCar extends Car {\n  constructor(make, model, year, topSpeed) {\n    super(make, model, year);\n    this.topSpeed = topSpeed;\n  }\n}\n\nlet mySportsCar = new SportsCar(\"Ferrari\", \"488\", 2023, 210);\nconsole.log(mySportsCar.start()); // Output: Engine started\nconsole.log(mySportsCar.topSpeed); // Output: 210\n```\n\n**Summary:**\n\nIn this lesson, you've explored advanced concepts related to JavaScript objects. You've learned about nested objects, object prototypes, constructor functions, the `class` syntax, and inheritance. These concepts are crucial for building more complex and organized applications. Continue practicing and experimenting with objects to solidify your understanding. In the next lesson, we'll cover JSON (JavaScript Object Notation) and how to convert objects to JSON and vice versa.","slug":"Advanced-Javascript-Objects","title":"Advanced JavaScript Objects","section":"Objects","icon":"info-circle","filePath":"/home/runner/work/amanj-course/amanj-course/lessons/05-Objects/03-Advanced-Javascript-Objects.md","nextSlug":"/amanj-course/lessons/Objects/ObjectExercises","prevSlug":"/amanj-course/lessons/Objects/Manipulating_Objects"}},"__N_SSG":true}