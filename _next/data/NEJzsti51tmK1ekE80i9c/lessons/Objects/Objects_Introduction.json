{"pageProps":{"post":{"attributes":{"title":"Introduction to JavaScript Objects"},"html":"<p><strong>Lesson 1: Introduction to JavaScript Objects</strong></p>\n<p>Welcome to your first lesson on JavaScript objects! Objects are fundamental data structures in JavaScript that allow you to store and organize related data and functions. They are a crucial concept in modern programming, enabling you to create complex and dynamic applications.</p>\n<p><strong>What is an Object?</strong>\nAn object is a collection of key-value pairs where each value can be of any data type: strings, numbers, arrays, other objects, functions, and more. Think of an object as a container that holds related information together. The keys in an object are also called properties, and they are used to access the corresponding values.</p>\n<p><strong>Creating an Object:</strong>\nYou can create an object in JavaScript using two main methods: object literal notation and the <code>Object</code> constructor.</p>\n<p><strong>1. Object Literal Notation:</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Creating an empty object</span>\n<span class=\"hljs-keyword\">let</span> person = {};\n\n<span class=\"hljs-comment\">// Adding properties to the object</span>\nperson.<span class=\"hljs-property\">firstName</span> = <span class=\"hljs-string\">&quot;John&quot;</span>;\nperson.<span class=\"hljs-property\">lastName</span> = <span class=\"hljs-string\">&quot;Doe&quot;</span>;\nperson.<span class=\"hljs-property\">age</span> = <span class=\"hljs-number\">30</span>;\n\n<span class=\"hljs-comment\">// Accessing properties</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">firstName</span>); <span class=\"hljs-comment\">// Output: John</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">age</span>);       <span class=\"hljs-comment\">// Output: 30</span>\n</code></pre>\n<p><strong>2. Using the Object Constructor:</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Creating an object using the constructor</span>\n<span class=\"hljs-keyword\">let</span> car = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();\n\n<span class=\"hljs-comment\">// Adding properties to the object</span>\ncar.<span class=\"hljs-property\">make</span> = <span class=\"hljs-string\">&quot;Toyota&quot;</span>;\ncar.<span class=\"hljs-property\">model</span> = <span class=\"hljs-string\">&quot;Camry&quot;</span>;\ncar.<span class=\"hljs-property\">year</span> = <span class=\"hljs-number\">2023</span>;\n\n<span class=\"hljs-comment\">// Accessing properties</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car.<span class=\"hljs-property\">make</span>);  <span class=\"hljs-comment\">// Output: Toyota</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car.<span class=\"hljs-property\">year</span>);  <span class=\"hljs-comment\">// Output: 2023</span>\n</code></pre>\n<p><strong>Object Literal Notation vs. Object Constructor:</strong>\nBoth methods achieve the same result, but object literal notation is more commonly used due to its simplicity and readability.</p>\n<p><strong>Accessing Object Properties:</strong>\nYou can access object properties using dot notation or bracket notation.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Using dot notation</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">firstName</span>); <span class=\"hljs-comment\">// Output: John</span>\n\n<span class=\"hljs-comment\">// Using bracket notation (especially useful when property names have spaces or special characters)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person[<span class=\"hljs-string\">&#x27;lastName&#x27;</span>]); <span class=\"hljs-comment\">// Output: Doe</span>\n</code></pre>\n<p><strong>Methods in Objects:</strong>\nObjects can also contain functions as properties, which are called methods. Methods allow you to perform actions or calculations related to the object.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> calculator = {\n  <span class=\"hljs-attr\">add</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) {\n    <span class=\"hljs-keyword\">return</span> a + b;\n  },\n  <span class=\"hljs-attr\">subtract</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) {\n    <span class=\"hljs-keyword\">return</span> a - b;\n  }\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(calculator.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>));      <span class=\"hljs-comment\">// Output: 8</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(calculator.<span class=\"hljs-title function_\">subtract</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>)); <span class=\"hljs-comment\">// Output: 6</span>\n</code></pre>\n<p>In this lesson, you&#39;ve learned the basics of JavaScript objects, including creating objects, adding properties, accessing properties, and including methods. Objects are the building blocks for more advanced programming concepts, so mastering them is essential for becoming proficient in JavaScript. Stay tuned for the next lesson, where we&#39;ll dive deeper into manipulating and working with objects!</p>\n","markdown":"\n**Lesson 1: Introduction to JavaScript Objects**\n\nWelcome to your first lesson on JavaScript objects! Objects are fundamental data structures in JavaScript that allow you to store and organize related data and functions. They are a crucial concept in modern programming, enabling you to create complex and dynamic applications.\n\n**What is an Object?**\nAn object is a collection of key-value pairs where each value can be of any data type: strings, numbers, arrays, other objects, functions, and more. Think of an object as a container that holds related information together. The keys in an object are also called properties, and they are used to access the corresponding values.\n\n**Creating an Object:**\nYou can create an object in JavaScript using two main methods: object literal notation and the `Object` constructor.\n\n**1. Object Literal Notation:**\n```javascript\n// Creating an empty object\nlet person = {};\n\n// Adding properties to the object\nperson.firstName = \"John\";\nperson.lastName = \"Doe\";\nperson.age = 30;\n\n// Accessing properties\nconsole.log(person.firstName); // Output: John\nconsole.log(person.age);       // Output: 30\n```\n\n**2. Using the Object Constructor:**\n```javascript\n// Creating an object using the constructor\nlet car = new Object();\n\n// Adding properties to the object\ncar.make = \"Toyota\";\ncar.model = \"Camry\";\ncar.year = 2023;\n\n// Accessing properties\nconsole.log(car.make);  // Output: Toyota\nconsole.log(car.year);  // Output: 2023\n```\n\n**Object Literal Notation vs. Object Constructor:**\nBoth methods achieve the same result, but object literal notation is more commonly used due to its simplicity and readability.\n\n**Accessing Object Properties:**\nYou can access object properties using dot notation or bracket notation.\n\n```javascript\n// Using dot notation\nconsole.log(person.firstName); // Output: John\n\n// Using bracket notation (especially useful when property names have spaces or special characters)\nconsole.log(person['lastName']); // Output: Doe\n```\n\n**Methods in Objects:**\nObjects can also contain functions as properties, which are called methods. Methods allow you to perform actions or calculations related to the object.\n\n```javascript\nlet calculator = {\n  add: function(a, b) {\n    return a + b;\n  },\n  subtract: function(a, b) {\n    return a - b;\n  }\n};\n\nconsole.log(calculator.add(5, 3));      // Output: 8\nconsole.log(calculator.subtract(10, 4)); // Output: 6\n```\n\nIn this lesson, you've learned the basics of JavaScript objects, including creating objects, adding properties, accessing properties, and including methods. Objects are the building blocks for more advanced programming concepts, so mastering them is essential for becoming proficient in JavaScript. Stay tuned for the next lesson, where we'll dive deeper into manipulating and working with objects!","slug":"Objects_Introduction","title":"Introduction to JavaScript Objects","section":"Objects","icon":"info-circle","filePath":"/home/runner/work/amanj-course/amanj-course/lessons/05-Objects/01-Objects_Introduction.md","nextSlug":"/amanj-course/lessons/Objects/Manipulating_Objects","prevSlug":"/amanj-course/lessons/Arrays/More List Exercises"}},"__N_SSG":true}